{"version":3,"file":"S3ViewerContent.esm.js","sources":["../../../src/components/S3ViewerContent/S3ViewerContent.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { Content, Table, TableColumn } from '@backstage/core-components';\nimport { useApi, useRouteRefParams } from '@backstage/core-plugin-api';\nimport { KeyData } from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { createStyles, Grid, makeStyles, Typography } from '@material-ui/core';\nimport SubdirectoryArrowLeftIcon from '@material-ui/icons/SubdirectoryArrowLeft';\nimport { S3BucketTreePicker } from '../S3BucketTreePicker';\nimport { S3OverviewCard } from '../S3OverviewCard';\nimport { S3ApiRef } from '../../api';\nimport { rootRouteRef } from '../../routes';\nimport { getFolderFromUrlDir, getPathFromUrlDir } from '../../utils';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    content: {\n      width: '100%',\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n    },\n  }),\n);\n\n\ntype LocationInfo = {\n  endpoint: string;\n  bucket: string;\n  key: string;\n  folder: string;\n};\n\ntype S3ViewerContentProps = {\n  bucketName?: string;\n  pathFolder?: string;\n};\n\nexport const S3ViewerContent = ({\n  bucketName,\n  pathFolder,\n}: S3ViewerContentProps) => {\n  const s3Api = useApi(S3ApiRef);\n  const classes = useStyles();\n  const tableRef = useRef<any>();\n  const urlParams = useRouteRefParams(rootRouteRef);\n\n  const [locationInfo, setLocationInfo] = useState<LocationInfo>({\n    endpoint: urlParams.endpoint ?? '',\n    bucket: urlParams.bucket ?? '',\n    key: getPathFromUrlDir(\n      urlParams['*'].replace(`${urlParams.endpoint}/${urlParams.bucket}`, ''),\n    ),\n    folder: getFolderFromUrlDir(\n      urlParams['*'].replace(`${urlParams.endpoint}/${urlParams.bucket}`, ''),\n    ),\n  });\n  const [pageSize, setPageSize] = useState(20);\n  const [token, setToken] = useState(['']);\n\n  const columns: TableColumn<KeyData>[] = [\n    {\n      title: 'Key',\n      field: 'name',\n      render: row => (\n        <Typography\n          onClick={() => {\n            if (!row.isFolder) {\n              setLocationInfo({\n                bucket: locationInfo.bucket,\n                endpoint: locationInfo.endpoint,\n                key: locationInfo.folder + row.name,\n                folder: locationInfo.folder,\n              });\n            } else {\n              setLocationInfo({\n                bucket: locationInfo.bucket,\n                endpoint: locationInfo.endpoint,\n                key: locationInfo.key,\n                folder: locationInfo.folder + row.name,\n              });\n              setToken(['']);\n              tableRef.current?.onQueryChange();\n            }\n          }}\n          style={{ cursor: 'pointer' }}\n        >\n          {row.name}\n        </Typography>\n      ),\n    },\n  ];\n\n  const {\n    value: bucketInfo,\n    loading: loadingBucketInfo,\n    error: errorBucketInfo,\n  } = useAsync(async () => {\n    if (!locationInfo.bucket || !locationInfo.endpoint) {\n      return undefined;\n    }\n    return s3Api.getBucketInfo(locationInfo.endpoint, locationInfo.bucket);\n  }, [locationInfo.endpoint, locationInfo.bucket]);\n\n  const {\n    value: objectInfo,\n    loading: loadingObjectInfo,\n    error: errorObjectInfo,\n  } = useAsync(async () => {\n    if (!locationInfo.bucket || !locationInfo.endpoint || !locationInfo.key) {\n      return undefined;\n    }\n    return s3Api.getObjectMetadata(\n      locationInfo.endpoint,\n      locationInfo.bucket,\n      locationInfo.key,\n    );\n  }, [locationInfo.endpoint, locationInfo.bucket, locationInfo.key]);\n\n  const loadData = async (\n    queryPage: number,\n    queryPageSize: number,\n    querySearch: string,\n  ) => {\n    const res = await s3Api.listBucketKeys(\n      locationInfo.endpoint,\n      locationInfo.bucket,\n      token[queryPage],\n      queryPageSize,\n      locationInfo.folder,\n      locationInfo.folder ? querySearch : pathFolder,\n    );\n\n    const newToken = [...token];\n    if (res.next) {\n      newToken[queryPage + 1] = res.next;\n      setToken(newToken);\n    }\n\n    const totalRows = queryPage * queryPageSize + res.keys.length;\n    const totalCount =\n      totalRows % queryPageSize === 0 ? res.totalBucketObjects : totalRows;\n\n    return {\n      data: res.keys,\n      page: queryPage,\n      totalCount: totalCount,\n    };\n  };\n\n  const handleBackClicked = (_event: any) => {\n    const folders = locationInfo.folder.split('/').filter(f => f);\n    let folderNew = '';\n    if (folders.length > 1) {\n      folderNew = `${folders.slice(0, folders.length - 1).join('/')}/`;\n    }\n    setLocationInfo({\n      bucket: locationInfo.bucket,\n      endpoint: locationInfo.endpoint,\n      key: locationInfo.key,\n      folder: folderNew,\n    });\n    tableRef.current?.onQueryChange();\n  };\n\n  const updateTreeViewValues = useCallback(\n    (newBucket: string, newEndpoint: string) => {\n      setLocationInfo({\n        endpoint: newEndpoint,\n        bucket: newBucket,\n        key: '',\n        folder: '',\n      });\n      setToken(['']);\n      tableRef.current?.onQueryChange();\n    },\n    [],\n  );\n\n  useEffect(() => {\n    setLocationInfo({\n      endpoint: urlParams.endpoint ?? '',\n      bucket: urlParams.bucket ?? '',\n      key: getPathFromUrlDir(\n        urlParams['*'].replace(`${urlParams.endpoint}/${urlParams.bucket}`, ''),\n      ),\n      folder: getFolderFromUrlDir(\n        urlParams['*'].replace(`${urlParams.endpoint}/${urlParams.bucket}`, ''),\n      ),\n    });\n    tableRef.current?.onQueryChange();\n  }, [urlParams, tableRef]);\n\n  return (\n    <>\n      <Content className={classes.content} noPadding>\n        <Grid container spacing={1}>\n          <Grid item xs={2}>\n            <S3BucketTreePicker\n              bucketName={bucketName}\n              pathFolder={pathFolder}\n              state={{ ...locationInfo }}\n              updateTreeViewValues={updateTreeViewValues}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Table<KeyData>\n              tableRef={tableRef}\n              columns={columns}\n              actions={[\n                {\n                  icon: () => <SubdirectoryArrowLeftIcon />,\n                  position: 'row',\n                  disabled: !locationInfo.folder,\n                  tooltip: 'Navigate Upwards',\n                  isFreeAction: true,\n                  onClick: handleBackClicked,\n                },\n              ]}\n              data={async query => {\n                // work around query being undefined once at start or bucket not selected\n                if (!query || locationInfo.bucket === '') {\n                  return { data: [], page: 0, totalCount: 0 };\n                } else if (token.length === 1) {\n                  query.page = 0;\n                  query.totalCount = 0;\n                }\n\n                return loadData(query.page, query.pageSize, query.search);\n              }}\n              subtitle={\n                locationInfo.folder &&\n                `Current directory: ${locationInfo.folder}`\n              }\n              onRowsPerPageChange={newPageSize => setPageSize(newPageSize)}\n              options={{\n                sorting: false,\n                paging: true,\n                search: true,\n                pageSize: pageSize,\n                pageSizeOptions: [20, 40, 80],\n                padding: 'dense',\n                showFirstLastPageButtons: false,\n                actionsColumnIndex: -1,\n                emptyRowsWhenPaging: false,\n              }}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <S3OverviewCard\n              bucketInfo={bucketInfo}\n              loadingBucketInfo={loadingBucketInfo}\n              errorBucketInfo={errorBucketInfo}\n              objectInfo={objectInfo}\n              loadingObjectInfo={loadingObjectInfo}\n              errorObjectInfo={errorObjectInfo}\n            />\n          </Grid>\n        </Grid>\n      </Content>\n    </>\n  );\n};\n"],"names":[],"mappings":"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"}