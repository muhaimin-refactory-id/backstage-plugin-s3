{"version":3,"file":"S3BucketTreePicker.esm.js","sources":["../../../src/components/S3BucketTreePicker/S3BucketTreePicker.tsx"],"sourcesContent":["import { Fragment, useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { S3ApiRef } from '../../api';\nimport {\n  Collapse,\n  createStyles,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport { Progress } from '@backstage/core-components';\nimport Alert from '@material-ui/lab/Alert';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { BucketGroupRequest } from '../../types';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    list: {\n      maxHeight: '80vh',\n      overflow: 'auto',\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n    endpoint: {\n      cursor: 'pointer',\n    },\n  }),\n);\n\ntype S3BucketTreePickerProps = {\n  state: {\n    endpoint: string;\n    bucket: string;\n  };\n  bucketName?: string,\n  pathFolder?: string,\n  updateTreeViewValues: (newBucket: string, newEndpoint: string) => void;\n};\n\nexport const S3BucketTreePicker = ({\n  state = { bucket: '', endpoint: '' },\n  bucketName,\n  pathFolder,\n  updateTreeViewValues,\n}: S3BucketTreePickerProps) => {\n  const s3Api = useApi(S3ApiRef);\n  const classes = useStyles();\n  const [open, setOpen] = useState(state.endpoint);\n\n  useEffect(() => {\n    if (state.endpoint) {\n      setOpen(state.endpoint);\n    }\n  }, [state.endpoint]);\n\n  const handleCollapseClick = (value: string) => {\n    if (open === value && open) {\n      setOpen('');\n    } else {\n      setOpen(value);\n    }\n  };\n\n  const {\n    value: bucketsByEndpoint = {},\n    loading,\n    error,\n  } = useAsync(async () => {\n    const groupedBuckets = await s3Api.getGroupedBuckets({ bucketName});\n    const endpoints = Object.keys(groupedBuckets);\n    if (!open && endpoints.length > 0) {\n      setOpen(endpoints[0]);\n    }\n    return groupedBuckets;\n  });\n\n  if (loading) {\n    return <Progress />;\n  } else if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  } else if (Object.keys(bucketsByEndpoint).length === 0) {\n    return <Typography>No buckets found</Typography>;\n  }\n\n  const isSelected = (endpoint: string, bucket: string): boolean => {\n    return state.bucket === bucket && state.endpoint === endpoint;\n  };\n\n  return (\n    <List dense className={classes.list}>\n      {Object.entries(bucketsByEndpoint).map(\n        ([endpointName, buckets], idxOne) => (\n          <Fragment key={idxOne}>\n            <ListItem\n              className={classes.endpoint}\n              onClick={() => handleCollapseClick(endpointName)}\n            >\n              <ListItemText primary={endpointName} />\n              {open === endpointName ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={open === endpointName} timeout=\"auto\" unmountOnExit>\n              <List dense disablePadding>\n                {buckets.map((bucketName, idxTwo) => (\n                  <ListItem\n                    button\n                    key={idxTwo}\n                    className={classes.nested}\n                    component=\"div\"\n                    selected={isSelected(endpointName, bucketName)}\n                    onClick={() => {\n                      if (isSelected(endpointName, bucketName)) {\n                        updateTreeViewValues('', '');\n                      } else {\n                        updateTreeViewValues(bucketName, endpointName);\n                      }\n                    }}\n                  >\n                    <Tooltip title={bucketName}>\n                      <ListItemText primary={bucketName} />\n                    </Tooltip>\n                  </ListItem>\n                ))}\n              </List>\n            </Collapse>\n          </Fragment>\n        ),\n      )}\n    </List>\n  );\n};\n"],"names":["bucketName"],"mappings":"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"}