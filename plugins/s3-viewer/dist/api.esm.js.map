{"version":3,"file":"api.esm.js","sources":["../src/api.ts"],"sourcesContent":["import {\n  DiscoveryApi,\n  createApiRef,\n  FetchApi,\n} from '@backstage/core-plugin-api';\nimport {\n  BucketDetails,\n  FetchObjectResult,\n  ListBucketKeysResult,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { BucketGroupRequest } from './types';\n\nexport const S3ApiRef = createApiRef<S3Api>({\n  id: 'plugin.s3.service',\n});\n\nexport interface S3Api {\n  /**\n   * Sets the cookie used by the plugin to authenticate users and allow them\n   * to download and preview the data in S3.\n   */\n  setCookie(): Promise<void>;\n  /**\n   * List the keys for a bucket.\n   * @param endpoint The endpoint where the bucket is\n   * @param bucket The bucket name\n   * @param continuationToken The continuation token to make pagination\n   * @param pageSize The page size, which can be changed in the UI\n   * @param folder The folder name where the keys are located\n   * @param prefix The prefix to filter the listed keys\n   */\n  listBucketKeys(\n    endpoint: string,\n    bucket: string,\n    continuationToken: string,\n    pageSize: number,\n    folder: string,\n    prefix: string | undefined,\n  ): Promise<ListBucketKeysResult>;\n\n  /**\n   * Returns all the bucket names found.\n   */\n  getAllBuckets(): Promise<string[]>;\n\n  /**\n   * Returns all the bucket names grouped by the endpoint where\n   * they are located. Used for the tree view in the UI.\n   */\n  getGroupedBuckets(\n    request?: BucketGroupRequest,\n  ): Promise<Record<string, string[]>>;\n\n  /**\n   * Returns all the bucket names found for a certain endpoint.\n   * @param endpoint The endpoint to fetch the bucket names\n   */\n  getBucketsByEndpoint(endpoint: string): Promise<string[]>;\n\n  /**\n   * Gets the bucket details or `undefined` if not found.\n   * @param endpoint The endpoint where the bucket is located\n   * @param bucket The bucket name to fetch info from\n   */\n  getBucketInfo(endpoint: string, bucket: string): Promise<BucketDetails>;\n\n  /**\n   * Gets an object metadata, including the link to stream its content.\n   * @param endpoint The endpoint where the bucket is\n   * @param bucket The bucket name\n   * @param key The key to obtain the metadata\n   */\n  getObjectMetadata(\n    endpoint: string,\n    bucket: string,\n    key: string,\n  ): Promise<FetchObjectResult>;\n}\n\nexport class S3Client implements S3Api {\n  discoveryApi: DiscoveryApi;\n  fetchApi: FetchApi;\n  constructor({\n    discoveryApi,\n    fetchApi,\n  }: {\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.discoveryApi = discoveryApi;\n    this.fetchApi = fetchApi;\n  }\n\n  private async callApi<T>(\n    path: string,\n    query: { [key in string]: any },\n  ): Promise<T> {\n    const apiUrl = await this.discoveryApi.getBaseUrl('s3-viewer');\n    const response = await this.fetchApi.fetch(\n      `${apiUrl}/${path}?${new URLSearchParams(query).toString()}`,\n      {\n        headers: {\n          Accept: 'application/json',\n        },\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Request failed for ${path}, ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return (await response.json()) as T;\n  }\n\n  async setCookie(): Promise<void> {\n    const apiUrl = await this.discoveryApi.getBaseUrl('s3-viewer');\n    // The `credentials` is needed to be set here, otherwise the cookie\n    // is not properly used by the `/stream` endpoint.\n    await this.fetchApi.fetch(`${apiUrl}/cookie`, { credentials: 'include' });\n  }\n\n  async listBucketKeys(\n    endpoint: string,\n    bucket: string,\n    continuationToken: string,\n    pageSize: number,\n    folder: string,\n    prefix: string | undefined,\n  ): Promise<ListBucketKeysResult> {\n    const result = await this.callApi<ListBucketKeysResult>(\n      `bucket/${encodeURIComponent(bucket)}/keys`,\n      {\n        endpoint,\n        continuationToken,\n        pageSize,\n        folder,\n        prefix,\n      },\n    );\n    return result;\n  }\n\n  async getAllBuckets(): Promise<string[]> {\n    const result = await this.callApi<string[]>('buckets', {});\n    return result;\n  }\n\n  async getBucketsByEndpoint(endpoint: string): Promise<string[]> {\n    const result = await this.callApi<string[]>('buckets/by-endpoint', {\n      endpoint,\n    });\n    return result;\n  }\n\n  async getGroupedBuckets(\n    request?: BucketGroupRequest,\n  ): Promise<Record<string, string[]>> {\n    const result = await this.callApi<Record<string, string[]>>(\n      'buckets/grouped',\n      request ?? {},\n    );\n    return result;\n  }\n\n  async getBucketInfo(\n    endpoint: string,\n    bucket: string,\n  ): Promise<BucketDetails> {\n    const result = await this.callApi<BucketDetails>(\n      `bucket/${encodeURIComponent(bucket)}`,\n      { endpoint },\n    );\n    return result;\n  }\n\n  async getObjectMetadata(\n    endpoint: string,\n    bucket: string,\n    key: string,\n  ): Promise<FetchObjectResult> {\n    const result = await this.callApi<FetchObjectResult>(\n      `bucket/${encodeURIComponent(bucket)}/${encodeURIComponent(key)}`,\n      { endpoint },\n    );\n    return result;\n  }\n}\n"],"names":[],"mappings":"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"}