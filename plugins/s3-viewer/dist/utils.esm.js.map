{"version":3,"file":"utils.esm.js","sources":["../src/utils.ts"],"sourcesContent":["import { S3_VIEWER_BUCKET } from \"./constant\";\nimport { Entity } from '@backstage/catalog-model';\n\n/**\n * Converts a number of bytes into a human readable text.\n *\n * @param bytes Number of bytes\n * @param si `true` to use metric (SI) units. `false` to use binary (IEC) units\n * @param dp Number of decimal places to display\n * @returns Formatted size\n */\nexport function humanFileSize(bytes: number | undefined, si = true, dp = 1) {\n  if (!bytes) {\n    return '0 B';\n  }\n\n  const thresh = si ? 1000 : 1024;\n  if (Math.abs(bytes) < thresh) {\n    return `${bytes} B`;\n  }\n\n  const units = si\n    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  let u = -1;\n  const r = 10 ** dp;\n\n  let newBytes = bytes;\n\n  do {\n    newBytes /= thresh;\n    ++u;\n  } while (\n    Math.round(Math.abs(newBytes) * r) / r >= thresh &&\n    u < units.length - 1\n  );\n\n  return `${newBytes.toFixed(dp)} ${units[u]}`;\n}\n\n/**\n * Gets the path used in the backend to fetch information of an object.\n * If the value is empty or a folder, it will return an empty path (no\n * object selected). Otherwise, it will return the current value.\n *\n * @param dir The pull path, which can be empty, a folder or a file path\n * @returns The path used to get the object information from the backend\n */\nexport function getPathFromUrlDir(dir: string | null): string {\n  if (!dir || dir.endsWith('/')) {\n    return '';\n  }\n\n  return dir;\n}\n\n/**\n * Get the folder from a full directory path. If the path is `null` or\n * empty, the folder will be also empty.\n *\n * Examples:\n * - `dir` is `test/folder/`. Then it will return the same\n * - `dir` is `test/folder/file.txt`. Then it will return `test/folder/`\n *\n * @param dir The full path used to fetch the current folder\n * @returns The current folder\n */\nexport function getFolderFromUrlDir(dir: string | null): string {\n  if (!dir || dir === '/') {\n    return '';\n  }\n\n  if (dir.endsWith('/')) {\n    return dir;\n  }\n\n  const folder = dir.split('/').slice(0, -1).join('/');\n  return folder ? `${folder}/` : folder;\n}\n\nexport const isS3ViewerBucketAvailable = (entity: Entity): boolean =>\n  Boolean(entity.metadata.annotations?.[S3_VIEWER_BUCKET]);\n\nexport function extractBucketAndPath(input: string): { bucket: string; path: string } {\n  const [bucket, path = ''] = input.split(':');\n  return { bucket, path };\n}"],"names":[],"mappings":";;AAWO,SAAS,aAAc,CAAA,KAAA,EAA2B,EAAK,GAAA,IAAA,EAAM,KAAK,CAAG,EAAA;AAC1E,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA;AAAA;AAGT,EAAM,MAAA,MAAA,GAAS,KAAK,GAAO,GAAA,IAAA;AAC3B,EAAA,IAAI,IAAK,CAAA,GAAA,CAAI,KAAK,CAAA,GAAI,MAAQ,EAAA;AAC5B,IAAA,OAAO,GAAG,KAAK,CAAA,EAAA,CAAA;AAAA;AAGjB,EAAM,MAAA,KAAA,GAAQ,KACV,CAAC,IAAA,EAAM,MAAM,IAAM,EAAA,IAAA,EAAM,MAAM,IAAM,EAAA,IAAA,EAAM,IAAI,CAC/C,GAAA,CAAC,OAAO,KAAO,EAAA,KAAA,EAAO,OAAO,KAAO,EAAA,KAAA,EAAO,OAAO,KAAK,CAAA;AAC3D,EAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,EAAA,MAAM,IAAI,EAAM,IAAA,EAAA;AAEhB,EAAA,IAAI,QAAW,GAAA,KAAA;AAEf,EAAG,GAAA;AACD,IAAY,QAAA,IAAA,MAAA;AACZ,IAAE,EAAA,CAAA;AAAA,GAEF,QAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,GAAI,CAAA,QAAQ,CAAI,GAAA,CAAC,CAAI,GAAA,CAAA,IAAK,MAC1C,IAAA,CAAA,GAAI,MAAM,MAAS,GAAA,CAAA;AAGrB,EAAO,OAAA,CAAA,EAAG,SAAS,OAAQ,CAAA,EAAE,CAAC,CAAI,CAAA,EAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAC5C;AAUO,SAAS,kBAAkB,GAA4B,EAAA;AAC5D,EAAA,IAAI,CAAC,GAAA,IAAO,GAAI,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AAC7B,IAAO,OAAA,EAAA;AAAA;AAGT,EAAO,OAAA,GAAA;AACT;AAaO,SAAS,oBAAoB,GAA4B,EAAA;AAC9D,EAAI,IAAA,CAAC,GAAO,IAAA,GAAA,KAAQ,GAAK,EAAA;AACvB,IAAO,OAAA,EAAA;AAAA;AAGT,EAAI,IAAA,GAAA,CAAI,QAAS,CAAA,GAAG,CAAG,EAAA;AACrB,IAAO,OAAA,GAAA;AAAA;AAGT,EAAM,MAAA,MAAA,GAAS,GAAI,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,MAAM,CAAG,EAAA,CAAA,CAAE,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA;AACnD,EAAO,OAAA,MAAA,GAAS,CAAG,EAAA,MAAM,CAAM,CAAA,CAAA,GAAA,MAAA;AACjC;AAEa,MAAA,yBAAA,GAA4B,CAAC,MACxC,KAAA,OAAA,CAAQ,OAAO,QAAS,CAAA,WAAA,GAAc,gBAAgB,CAAC;AAElD,SAAS,qBAAqB,KAAiD,EAAA;AACpF,EAAA,MAAM,CAAC,MAAQ,EAAA,IAAA,GAAO,EAAE,CAAI,GAAA,KAAA,CAAM,MAAM,GAAG,CAAA;AAC3C,EAAO,OAAA,EAAE,QAAQ,IAAK,EAAA;AACxB;;;;"}