{"version":3,"file":"index.cjs.js","sources":["../../src/credentials-provider/index.ts"],"sourcesContent":["import { Config } from '@backstage/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport {\n  AllowedBuckets,\n  BucketCredentials,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { CredentialsProvider } from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport { ConfigCredentialsProvider } from './ConfigCredentialsProvider';\nimport { RadosGwCredentialsProvider } from './RadosGwCredentialsProvider';\nimport { IAMRoleCredentialsProvider } from './IAMRoleCredentialsProvider';\n\nclass CombinedCredentialsProvider implements CredentialsProvider {\n  constructor(readonly credentialsProviders: CredentialsProvider[]) {}\n\n  async getBucketCredentials(): Promise<BucketCredentials[]> {\n    return await Promise.all(\n      this.credentialsProviders.map(async locator =>\n        locator.getBucketCredentials(),\n      ),\n    )\n      .then(res => {\n        return res.flat();\n      })\n      .catch(e => {\n        throw e;\n      });\n  }\n}\n\nexport const getCombinedCredentialsProvider = (\n  rootConfig: Config,\n  logger: LoggerService,\n): CombinedCredentialsProvider => {\n  const allowedBuckets: AllowedBuckets[] = [];\n  rootConfig.getOptionalConfigArray('s3.allowedBuckets')?.forEach(c =>\n    allowedBuckets.push({\n      platform: c.getString('platform'),\n      buckets: c.getStringArray('buckets'),\n    }),\n  );\n\n  const credentialsProvider = rootConfig\n    .getConfigArray('s3.bucketLocatorMethods')\n    .map(clusterLocatorMethod => {\n      const type = clusterLocatorMethod.getString('type');\n      switch (type) {\n        case 'config':\n          return ConfigCredentialsProvider.fromConfig(\n            clusterLocatorMethod,\n            logger,\n            allowedBuckets,\n          );\n        case 'radosgw-admin':\n          return RadosGwCredentialsProvider.fromConfig(\n            clusterLocatorMethod,\n            logger,\n            allowedBuckets,\n          );\n        case 'iam-role':\n          return IAMRoleCredentialsProvider.fromConfig(\n            clusterLocatorMethod,\n            logger,\n            allowedBuckets,\n          );\n        default:\n          throw new Error(`Unsupported s3.bucketLocatorMethods: \"${type}\"`);\n      }\n    });\n\n  return new CombinedCredentialsProvider(credentialsProvider);\n};\n"],"names":["ConfigCredentialsProvider","RadosGwCredentialsProvider","IAMRoleCredentialsProvider"],"mappings":";;;;;;AAWA,MAAM,2BAA2D,CAAA;AAAA,EAC/D,YAAqB,oBAA6C,EAAA;AAA7C,IAAA,IAAA,CAAA,oBAAA,GAAA,oBAAA;AAAA;AAA8C,EAEnE,MAAM,oBAAqD,GAAA;AACzD,IAAA,OAAO,MAAM,OAAQ,CAAA,GAAA;AAAA,MACnB,KAAK,oBAAqB,CAAA,GAAA;AAAA,QAAI,OAAM,OAClC,KAAA,OAAA,CAAQ,oBAAqB;AAAA;AAC/B,KACF,CACG,KAAK,CAAO,GAAA,KAAA;AACX,MAAA,OAAO,IAAI,IAAK,EAAA;AAAA,KACjB,CACA,CAAA,KAAA,CAAM,CAAK,CAAA,KAAA;AACV,MAAM,MAAA,CAAA;AAAA,KACP,CAAA;AAAA;AAEP;AAEa,MAAA,8BAAA,GAAiC,CAC5C,UAAA,EACA,MACgC,KAAA;AAChC,EAAA,MAAM,iBAAmC,EAAC;AAC1C,EAAW,UAAA,CAAA,sBAAA,CAAuB,mBAAmB,CAAG,EAAA,OAAA;AAAA,IAAQ,CAAA,CAAA,KAC9D,eAAe,IAAK,CAAA;AAAA,MAClB,QAAA,EAAU,CAAE,CAAA,SAAA,CAAU,UAAU,CAAA;AAAA,MAChC,OAAA,EAAS,CAAE,CAAA,cAAA,CAAe,SAAS;AAAA,KACpC;AAAA,GACH;AAEA,EAAA,MAAM,sBAAsB,UACzB,CAAA,cAAA,CAAe,yBAAyB,CAAA,CACxC,IAAI,CAAwB,oBAAA,KAAA;AAC3B,IAAM,MAAA,IAAA,GAAO,oBAAqB,CAAA,SAAA,CAAU,MAAM,CAAA;AAClD,IAAA,QAAQ,IAAM;AAAA,MACZ,KAAK,QAAA;AACH,QAAA,OAAOA,mDAA0B,CAAA,UAAA;AAAA,UAC/B,oBAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,KAAK,eAAA;AACH,QAAA,OAAOC,qDAA2B,CAAA,UAAA;AAAA,UAChC,oBAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,KAAK,UAAA;AACH,QAAA,OAAOC,qDAA2B,CAAA,UAAA;AAAA,UAChC,oBAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF;AACE,QAAA,MAAM,IAAI,KAAA,CAAM,CAAyC,sCAAA,EAAA,IAAI,CAAG,CAAA,CAAA,CAAA;AAAA;AACpE,GACD,CAAA;AAEH,EAAO,OAAA,IAAI,4BAA4B,mBAAmB,CAAA;AAC5D;;;;"}