{"version":3,"file":"ConfigCredentialsProvider.cjs.js","sources":["../../src/credentials-provider/ConfigCredentialsProvider.ts"],"sourcesContent":["import { Config } from '@backstage/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport {\n  AllowedBuckets,\n  BucketCredentials,\n  S3Platform,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { CredentialsProvider } from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport { fetchBucketsForPlatform } from './utils';\n\nexport class ConfigCredentialsProvider implements CredentialsProvider {\n  constructor(\n    readonly platforms: S3Platform[],\n    readonly logger: LoggerService,\n    readonly allowedBuckets: AllowedBuckets[],\n  ) {}\n\n  static fromConfig(\n    config: Config,\n    logger: LoggerService,\n    allowedBuckets: AllowedBuckets[],\n  ): ConfigCredentialsProvider {\n    const platforms: S3Platform[] = config\n      .getConfigArray('platforms')\n      .map(cfg => {\n        const name = cfg.getOptionalString('name') || cfg.getString('endpoint');\n        return {\n          endpoint: cfg.getString('endpoint'),\n          endpointName: name,\n          region: cfg.getString('region'),\n          credentials: {\n            accessKeyId: cfg.getString('accessKeyId'),\n            secretAccessKey: cfg.getString('secretAccessKey'),\n          },\n        };\n      });\n\n    return new ConfigCredentialsProvider(platforms, logger, allowedBuckets);\n  }\n\n  async getBucketCredentials(): Promise<BucketCredentials[]> {\n    const bucketCreds: BucketCredentials[] = [];\n    await Promise.all(\n      this.platforms.map(async platform => {\n        try {\n          const buckets = await fetchBucketsForPlatform(\n            platform,\n            this.allowedBuckets,\n          );\n          const creds: BucketCredentials[] = buckets.map(b => ({\n            bucket: b,\n            credentials: platform.credentials,\n            endpoint: platform.endpoint,\n            endpointName: platform.endpointName,\n            region: platform.region,\n          }));\n          bucketCreds.push(...creds);\n        } catch (err) {\n          this.logger.error(\n            `Error fetching credentials for buckets in ${platform.endpoint}: ${err}`,\n          );\n        }\n      }),\n    );\n\n    return bucketCreds;\n  }\n}\n"],"names":["fetchBucketsForPlatform"],"mappings":";;;;AAUO,MAAM,yBAAyD,CAAA;AAAA,EACpE,WAAA,CACW,SACA,EAAA,MAAA,EACA,cACT,EAAA;AAHS,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,cAAA,GAAA,cAAA;AAAA;AACR,EAEH,OAAO,UAAA,CACL,MACA,EAAA,MAAA,EACA,cAC2B,EAAA;AAC3B,IAAA,MAAM,YAA0B,MAC7B,CAAA,cAAA,CAAe,WAAW,CAAA,CAC1B,IAAI,CAAO,GAAA,KAAA;AACV,MAAA,MAAM,OAAO,GAAI,CAAA,iBAAA,CAAkB,MAAM,CAAK,IAAA,GAAA,CAAI,UAAU,UAAU,CAAA;AACtE,MAAO,OAAA;AAAA,QACL,QAAA,EAAU,GAAI,CAAA,SAAA,CAAU,UAAU,CAAA;AAAA,QAClC,YAAc,EAAA,IAAA;AAAA,QACd,MAAA,EAAQ,GAAI,CAAA,SAAA,CAAU,QAAQ,CAAA;AAAA,QAC9B,WAAa,EAAA;AAAA,UACX,WAAA,EAAa,GAAI,CAAA,SAAA,CAAU,aAAa,CAAA;AAAA,UACxC,eAAA,EAAiB,GAAI,CAAA,SAAA,CAAU,iBAAiB;AAAA;AAClD,OACF;AAAA,KACD,CAAA;AAEH,IAAA,OAAO,IAAI,yBAAA,CAA0B,SAAW,EAAA,MAAA,EAAQ,cAAc,CAAA;AAAA;AACxE,EAEA,MAAM,oBAAqD,GAAA;AACzD,IAAA,MAAM,cAAmC,EAAC;AAC1C,IAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,MACZ,IAAK,CAAA,SAAA,CAAU,GAAI,CAAA,OAAM,QAAY,KAAA;AACnC,QAAI,IAAA;AACF,UAAA,MAAM,UAAU,MAAMA,6BAAA;AAAA,YACpB,QAAA;AAAA,YACA,IAAK,CAAA;AAAA,WACP;AACA,UAAM,MAAA,KAAA,GAA6B,OAAQ,CAAA,GAAA,CAAI,CAAM,CAAA,MAAA;AAAA,YACnD,MAAQ,EAAA,CAAA;AAAA,YACR,aAAa,QAAS,CAAA,WAAA;AAAA,YACtB,UAAU,QAAS,CAAA,QAAA;AAAA,YACnB,cAAc,QAAS,CAAA,YAAA;AAAA,YACvB,QAAQ,QAAS,CAAA;AAAA,WACjB,CAAA,CAAA;AACF,UAAY,WAAA,CAAA,IAAA,CAAK,GAAG,KAAK,CAAA;AAAA,iBAClB,GAAK,EAAA;AACZ,UAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,YACV,CAA6C,0CAAA,EAAA,QAAA,CAAS,QAAQ,CAAA,EAAA,EAAK,GAAG,CAAA;AAAA,WACxE;AAAA;AACF,OACD;AAAA,KACH;AAEA,IAAO,OAAA,WAAA;AAAA;AAEX;;;;"}