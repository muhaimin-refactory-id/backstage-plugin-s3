{"version":3,"file":"RadosGwCredentialsProvider.cjs.js","sources":["../../src/credentials-provider/RadosGwCredentialsProvider.ts"],"sourcesContent":["import { Config } from '@backstage/config';\nimport { SignatureV4 } from '@smithy/signature-v4';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { HttpRequest } from '@smithy/protocol-http';\nimport {\n  AllowedBuckets,\n  BucketCredentials,\n  S3Platform,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { CredentialsProvider } from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport fetch from 'cross-fetch';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype RadosGwAdminUserInfo = {\n  keys: {\n    user: string;\n    access_key: string;\n    secret_key: string;\n  }[];\n};\n\nexport class RadosGwCredentialsProvider implements CredentialsProvider {\n  constructor(\n    readonly platforms: S3Platform[],\n    readonly logger: LoggerService,\n    readonly allowedBuckets: AllowedBuckets[],\n  ) {}\n\n  static fromConfig(\n    config: Config,\n    logger: LoggerService,\n    allowedBuckets: AllowedBuckets[],\n  ): RadosGwCredentialsProvider {\n    const platforms: S3Platform[] = config\n      .getConfigArray('platforms')\n      .map(cfg => {\n        const name = cfg.getOptionalString('name') || cfg.getString('endpoint');\n        return {\n          endpoint: cfg.getString('endpoint'),\n          endpointName: name,\n          region: cfg.getString('region'),\n          credentials: {\n            accessKeyId: cfg.getString('accessKeyId'),\n            secretAccessKey: cfg.getString('secretAccessKey'),\n          },\n        };\n      });\n\n    return new RadosGwCredentialsProvider(platforms, logger, allowedBuckets);\n  }\n\n  async getBucketCredentials(): Promise<BucketCredentials[]> {\n    const bucketCreds: BucketCredentials[] = [];\n    await Promise.all(\n      this.platforms.map(async platform => {\n        try {\n          const signer = new SignatureV4({\n            credentials: platform.credentials!,\n            region: platform.region,\n            service: 's3',\n            sha256: Sha256,\n          });\n\n          const bucketList = (\n            await this.fetchBuckets(platform.endpoint, signer)\n          ).filter(b => {\n            const allowedBuckets =\n              this.allowedBuckets.find(\n                a => a.platform === platform.endpointName,\n              )?.buckets || [];\n\n            // If no allowedBuckets defined for the platform, all its buckets are allowed by default\n            if (allowedBuckets.length === 0) {\n              return true;\n            }\n\n            return allowedBuckets.some(a => {\n              // Add the start/end of regular expression, so no unexpected matches happen\n              // Example: `test` should't match `test-one`, but `test.*` should.\n              return b.match(`^${a}$`);\n            });\n          });\n\n          await Promise.all(\n            bucketList.map(async bucket => {\n              const bucketOwner = await this.getBucketOwner(\n                platform.endpoint,\n                bucket,\n                signer,\n              );\n              const result = await this.fetchUserInfo(\n                platform.endpoint,\n                bucketOwner,\n                signer,\n              );\n              const ownerCreds = result.keys.find(k => k.user === bucketOwner);\n              if (!ownerCreds) {\n                return;\n              }\n              bucketCreds.push({\n                bucket: bucket,\n                credentials: {\n                  accessKeyId: ownerCreds.access_key,\n                  secretAccessKey: ownerCreds.secret_key,\n                },\n                endpoint: platform.endpoint,\n                endpointName: platform.endpointName,\n                region: platform.region,\n              });\n            }),\n          );\n        } catch (err) {\n          this.logger.error(\n            `Error fetching credentials for buckets in ${platform.endpoint}: ${err}`,\n          );\n        }\n      }),\n    );\n\n    return bucketCreds;\n  }\n\n  private async fetchBuckets(\n    endpoint: string,\n    signer: SignatureV4,\n  ): Promise<string[]> {\n    const url = new URL(`${endpoint}/admin/bucket?format=json`);\n    const request = await signer.sign(\n      {\n        protocol: 'http',\n        hostname: url.hostname.toString(),\n        path: url.pathname.toString(),\n        method: 'GET',\n        query: Object.fromEntries(new URLSearchParams(url.search.substring(1))),\n      } as HttpRequest,\n      {},\n    );\n\n    const response = await fetch(url.toString(), request);\n\n    if (!response.ok) {\n      throw new Error(\n        `Error fetching buckets from radosgw: ${response.statusText}`,\n      );\n    }\n\n    return (await response.json()) as string[];\n  }\n\n  private async getBucketOwner(\n    endpoint: string,\n    bucket: string,\n    signer: SignatureV4,\n  ): Promise<string> {\n    const url = new URL(\n      `${endpoint}/admin/bucket?bucket=${bucket}&format=json`,\n    );\n    const request = await signer.sign(\n      {\n        protocol: 'http',\n        hostname: url.hostname.toString(),\n        path: url.pathname.toString(),\n        method: 'GET',\n        query: Object.fromEntries(new URLSearchParams(url.search.substring(1))),\n      } as HttpRequest,\n      {},\n    );\n\n    const response = await fetch(url.toString(), request);\n    if (!response.ok) {\n      throw new Error(\n        `Error fetching buckets from radosgw: ${response.statusText}`,\n      );\n    }\n\n    const bucketInfo: { owner: string } = await response.json();\n    return bucketInfo.owner;\n  }\n\n  private async fetchUserInfo(\n    endpoint: string,\n    user: string,\n    signer: SignatureV4,\n  ): Promise<RadosGwAdminUserInfo> {\n    const url = new URL(`${endpoint}/admin/user?format=json&uid=${user}`);\n    const request = await signer.sign(\n      {\n        protocol: 'http',\n        hostname: url.hostname.toString(),\n        path: url.pathname.toString(),\n        method: 'GET',\n        query: Object.fromEntries(new URLSearchParams(url.search.substring(1))),\n      } as HttpRequest,\n      {},\n    );\n\n    const response = await fetch(url.toString(), request);\n    if (!response.ok) {\n      throw new Error(\n        `Error fetching user info from radosgw: ${response.statusText}`,\n      );\n    }\n\n    return (await response.json()) as RadosGwAdminUserInfo;\n  }\n}\n"],"names":["SignatureV4","Sha256","fetch"],"mappings":";;;;;;;;;;AAqBO,MAAM,0BAA0D,CAAA;AAAA,EACrE,WAAA,CACW,SACA,EAAA,MAAA,EACA,cACT,EAAA;AAHS,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,cAAA,GAAA,cAAA;AAAA;AACR,EAEH,OAAO,UAAA,CACL,MACA,EAAA,MAAA,EACA,cAC4B,EAAA;AAC5B,IAAA,MAAM,YAA0B,MAC7B,CAAA,cAAA,CAAe,WAAW,CAAA,CAC1B,IAAI,CAAO,GAAA,KAAA;AACV,MAAA,MAAM,OAAO,GAAI,CAAA,iBAAA,CAAkB,MAAM,CAAK,IAAA,GAAA,CAAI,UAAU,UAAU,CAAA;AACtE,MAAO,OAAA;AAAA,QACL,QAAA,EAAU,GAAI,CAAA,SAAA,CAAU,UAAU,CAAA;AAAA,QAClC,YAAc,EAAA,IAAA;AAAA,QACd,MAAA,EAAQ,GAAI,CAAA,SAAA,CAAU,QAAQ,CAAA;AAAA,QAC9B,WAAa,EAAA;AAAA,UACX,WAAA,EAAa,GAAI,CAAA,SAAA,CAAU,aAAa,CAAA;AAAA,UACxC,eAAA,EAAiB,GAAI,CAAA,SAAA,CAAU,iBAAiB;AAAA;AAClD,OACF;AAAA,KACD,CAAA;AAEH,IAAA,OAAO,IAAI,0BAAA,CAA2B,SAAW,EAAA,MAAA,EAAQ,cAAc,CAAA;AAAA;AACzE,EAEA,MAAM,oBAAqD,GAAA;AACzD,IAAA,MAAM,cAAmC,EAAC;AAC1C,IAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,MACZ,IAAK,CAAA,SAAA,CAAU,GAAI,CAAA,OAAM,QAAY,KAAA;AACnC,QAAI,IAAA;AACF,UAAM,MAAA,MAAA,GAAS,IAAIA,uBAAY,CAAA;AAAA,YAC7B,aAAa,QAAS,CAAA,WAAA;AAAA,YACtB,QAAQ,QAAS,CAAA,MAAA;AAAA,YACjB,OAAS,EAAA,IAAA;AAAA,YACT,MAAQ,EAAAC;AAAA,WACT,CAAA;AAED,UAAM,MAAA,UAAA,GAAA,CACJ,MAAM,IAAK,CAAA,YAAA,CAAa,SAAS,QAAU,EAAA,MAAM,CACjD,EAAA,MAAA,CAAO,CAAK,CAAA,KAAA;AACZ,YAAM,MAAA,cAAA,GACJ,KAAK,cAAe,CAAA,IAAA;AAAA,cAClB,CAAA,CAAA,KAAK,CAAE,CAAA,QAAA,KAAa,QAAS,CAAA;AAAA,aAC/B,EAAG,WAAW,EAAC;AAGjB,YAAI,IAAA,cAAA,CAAe,WAAW,CAAG,EAAA;AAC/B,cAAO,OAAA,IAAA;AAAA;AAGT,YAAO,OAAA,cAAA,CAAe,KAAK,CAAK,CAAA,KAAA;AAG9B,cAAA,OAAO,CAAE,CAAA,KAAA,CAAM,CAAI,CAAA,EAAA,CAAC,CAAG,CAAA,CAAA,CAAA;AAAA,aACxB,CAAA;AAAA,WACF,CAAA;AAED,UAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,YACZ,UAAA,CAAW,GAAI,CAAA,OAAM,MAAU,KAAA;AAC7B,cAAM,MAAA,WAAA,GAAc,MAAM,IAAK,CAAA,cAAA;AAAA,gBAC7B,QAAS,CAAA,QAAA;AAAA,gBACT,MAAA;AAAA,gBACA;AAAA,eACF;AACA,cAAM,MAAA,MAAA,GAAS,MAAM,IAAK,CAAA,aAAA;AAAA,gBACxB,QAAS,CAAA,QAAA;AAAA,gBACT,WAAA;AAAA,gBACA;AAAA,eACF;AACA,cAAA,MAAM,aAAa,MAAO,CAAA,IAAA,CAAK,KAAK,CAAK,CAAA,KAAA,CAAA,CAAE,SAAS,WAAW,CAAA;AAC/D,cAAA,IAAI,CAAC,UAAY,EAAA;AACf,gBAAA;AAAA;AAEF,cAAA,WAAA,CAAY,IAAK,CAAA;AAAA,gBACf,MAAA;AAAA,gBACA,WAAa,EAAA;AAAA,kBACX,aAAa,UAAW,CAAA,UAAA;AAAA,kBACxB,iBAAiB,UAAW,CAAA;AAAA,iBAC9B;AAAA,gBACA,UAAU,QAAS,CAAA,QAAA;AAAA,gBACnB,cAAc,QAAS,CAAA,YAAA;AAAA,gBACvB,QAAQ,QAAS,CAAA;AAAA,eAClB,CAAA;AAAA,aACF;AAAA,WACH;AAAA,iBACO,GAAK,EAAA;AACZ,UAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,YACV,CAA6C,0CAAA,EAAA,QAAA,CAAS,QAAQ,CAAA,EAAA,EAAK,GAAG,CAAA;AAAA,WACxE;AAAA;AACF,OACD;AAAA,KACH;AAEA,IAAO,OAAA,WAAA;AAAA;AACT,EAEA,MAAc,YACZ,CAAA,QAAA,EACA,MACmB,EAAA;AACnB,IAAA,MAAM,GAAM,GAAA,IAAI,GAAI,CAAA,CAAA,EAAG,QAAQ,CAA2B,yBAAA,CAAA,CAAA;AAC1D,IAAM,MAAA,OAAA,GAAU,MAAM,MAAO,CAAA,IAAA;AAAA,MAC3B;AAAA,QACE,QAAU,EAAA,MAAA;AAAA,QACV,QAAA,EAAU,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAChC,IAAA,EAAM,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAC5B,MAAQ,EAAA,KAAA;AAAA,QACR,KAAA,EAAO,MAAO,CAAA,WAAA,CAAY,IAAI,eAAA,CAAgB,IAAI,MAAO,CAAA,SAAA,CAAU,CAAC,CAAC,CAAC;AAAA,OACxE;AAAA,MACA;AAAC,KACH;AAEA,IAAA,MAAM,WAAW,MAAMC,sBAAA,CAAM,GAAI,CAAA,QAAA,IAAY,OAAO,CAAA;AAEpD,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,qCAAA,EAAwC,SAAS,UAAU,CAAA;AAAA,OAC7D;AAAA;AAGF,IAAQ,OAAA,MAAM,SAAS,IAAK,EAAA;AAAA;AAC9B,EAEA,MAAc,cAAA,CACZ,QACA,EAAA,MAAA,EACA,MACiB,EAAA;AACjB,IAAA,MAAM,MAAM,IAAI,GAAA;AAAA,MACd,CAAA,EAAG,QAAQ,CAAA,qBAAA,EAAwB,MAAM,CAAA,YAAA;AAAA,KAC3C;AACA,IAAM,MAAA,OAAA,GAAU,MAAM,MAAO,CAAA,IAAA;AAAA,MAC3B;AAAA,QACE,QAAU,EAAA,MAAA;AAAA,QACV,QAAA,EAAU,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAChC,IAAA,EAAM,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAC5B,MAAQ,EAAA,KAAA;AAAA,QACR,KAAA,EAAO,MAAO,CAAA,WAAA,CAAY,IAAI,eAAA,CAAgB,IAAI,MAAO,CAAA,SAAA,CAAU,CAAC,CAAC,CAAC;AAAA,OACxE;AAAA,MACA;AAAC,KACH;AAEA,IAAA,MAAM,WAAW,MAAMA,sBAAA,CAAM,GAAI,CAAA,QAAA,IAAY,OAAO,CAAA;AACpD,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,qCAAA,EAAwC,SAAS,UAAU,CAAA;AAAA,OAC7D;AAAA;AAGF,IAAM,MAAA,UAAA,GAAgC,MAAM,QAAA,CAAS,IAAK,EAAA;AAC1D,IAAA,OAAO,UAAW,CAAA,KAAA;AAAA;AACpB,EAEA,MAAc,aAAA,CACZ,QACA,EAAA,IAAA,EACA,MAC+B,EAAA;AAC/B,IAAA,MAAM,MAAM,IAAI,GAAA,CAAI,GAAG,QAAQ,CAAA,4BAAA,EAA+B,IAAI,CAAE,CAAA,CAAA;AACpE,IAAM,MAAA,OAAA,GAAU,MAAM,MAAO,CAAA,IAAA;AAAA,MAC3B;AAAA,QACE,QAAU,EAAA,MAAA;AAAA,QACV,QAAA,EAAU,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAChC,IAAA,EAAM,GAAI,CAAA,QAAA,CAAS,QAAS,EAAA;AAAA,QAC5B,MAAQ,EAAA,KAAA;AAAA,QACR,KAAA,EAAO,MAAO,CAAA,WAAA,CAAY,IAAI,eAAA,CAAgB,IAAI,MAAO,CAAA,SAAA,CAAU,CAAC,CAAC,CAAC;AAAA,OACxE;AAAA,MACA;AAAC,KACH;AAEA,IAAA,MAAM,WAAW,MAAMA,sBAAA,CAAM,GAAI,CAAA,QAAA,IAAY,OAAO,CAAA;AACpD,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,uCAAA,EAA0C,SAAS,UAAU,CAAA;AAAA,OAC/D;AAAA;AAGF,IAAQ,OAAA,MAAM,SAAS,IAAK,EAAA;AAAA;AAEhC;;;;"}