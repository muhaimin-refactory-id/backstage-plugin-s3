{"version":3,"file":"S3Builder.cjs.js","sources":["../../src/service/S3Builder.ts"],"sourcesContent":["import { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport {\n  BucketStatsProvider,\n  BucketsProvider,\n  CredentialsProvider,\n  S3Api,\n} from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport { S3BucketsProvider } from './S3BucketsProvider';\nimport { S3Client } from './S3Api';\nimport {\n  AuthService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n  readSchedulerServiceTaskScheduleDefinitionFromConfig,\n  SchedulerService,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { assertError, NotAllowedError, NotFoundError } from '@backstage/errors';\nimport {\n  AuthorizeResult,\n  PolicyDecision,\n  QueryPermissionRequest,\n} from '@backstage/plugin-permission-common';\nimport {\n  BucketDetailsFilters,\n  permissions,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { getCombinedCredentialsProvider } from '../credentials-provider';\nimport cookieParser from 'cookie-parser';\nimport { HumanDuration } from '@backstage/types';\nimport { matches, transformConditions } from '../permissions';\n\nexport interface S3Environment {\n  auth: AuthService;\n  logger: LoggerService;\n  config: Config;\n  scheduler: SchedulerService;\n  discovery: DiscoveryService;\n  permissions: PermissionsService;\n  httpAuth: HttpAuthService;\n}\n\nexport interface S3BuilderReturn {\n  router: express.Router;\n}\n\nexport class S3Builder {\n  private refreshInterval: HumanDuration | undefined;\n  private client?: S3Api;\n  private credentialsProvider?: CredentialsProvider;\n  private bucketsProvider?: BucketsProvider;\n  private statsProvider?: BucketStatsProvider;\n\n  constructor(protected readonly env: S3Environment) {}\n\n  static createBuilder(env: S3Environment) {\n    return new S3Builder(env);\n  }\n\n  public async build(): Promise<S3BuilderReturn> {\n    const { logger, config, scheduler, discovery } = this.env;\n\n    logger.info('Initializing S3 backend');\n\n    if (!config.has('s3')) {\n      logger.warn('Failed to initialize S3 backend: s3 config is missing');\n      return {\n        router: Router(),\n      };\n    }\n\n    // Temporarily maintain support for the `setRefreshInterval` method if the configuration\n    // is not used. Remove it in some of the next releases. Added a deprecation for now\n    const fallbackSchedule = this.refreshInterval\n      ? { frequency: this.refreshInterval, timeout: this.refreshInterval }\n      : undefined;\n\n    const schedule: SchedulerServiceTaskScheduleDefinition | undefined =\n      config.has('s3.bucketRefreshSchedule')\n        ? readSchedulerServiceTaskScheduleDefinitionFromConfig(\n            config.getConfig('s3.bucketRefreshSchedule'),\n          )\n        : fallbackSchedule;\n\n    const credentialsProvider =\n      this.credentialsProvider ?? this.buildCredentialsProvider();\n\n    this.bucketsProvider =\n      this.bucketsProvider ??\n      S3BucketsProvider.create(\n        logger,\n        scheduler,\n        credentialsProvider,\n        this.statsProvider,\n        schedule,\n      );\n\n    this.client =\n      this.client ??\n      new S3Client({\n        bucketsProvider: this.bucketsProvider,\n        discoveryApi: discovery,\n      });\n\n    if (this.client.setBucketsProvider) {\n      this.client.setBucketsProvider(this.bucketsProvider);\n    }\n\n    const router = this.buildRouter(this.client);\n\n    return {\n      router: router,\n    };\n  }\n\n  private buildCredentialsProvider(): CredentialsProvider {\n    return getCombinedCredentialsProvider(this.env.config, this.env.logger);\n  }\n\n  /**\n   * Overwrites the current s3 client.\n   *\n   * @param client - The new S3 client\n   * @returns\n   */\n  public setClient(client: S3Api) {\n    this.client = client;\n    return this;\n  }\n\n  /**\n   * Overwrites the credentials provider.\n   *\n   * @param credentialsProvider - The new credentials provider\n   * @returns\n   */\n  public setCredentialsProvider(credentialsProvider: CredentialsProvider) {\n    this.credentialsProvider = credentialsProvider;\n    return this;\n  }\n\n  /**\n   * Overwrites the bucket provider.\n   *\n   * @param bucketsProvider - The new bucket provider\n   * @returns\n   */\n  public setBucketsProvider(bucketsProvider: BucketsProvider) {\n    this.bucketsProvider = bucketsProvider;\n    return this;\n  }\n\n  /**\n   * Sets a new bucket stats provider. By default this is undefined.\n   *\n   * @param bucketStatsProvider - The new bucket stats provider\n   * @returns\n   */\n  public setBucketStatsProvider(bucketStatsProvider: BucketStatsProvider) {\n    this.statsProvider = bucketStatsProvider;\n    return this;\n  }\n\n  /**\n   * Sets the refresh interval for the radosgw-admin provider.\n   * By default, the refresh is not enabled, set this value to\n   * allow reloading the buckets.\n   *\n   * @param refreshInterval - The refresh interval to reload buckets\n   * @returns\n   * @deprecated Now the refresh interval is set via the app-config.yaml file.\n   * Define `s3.bucketRefreshSchedule` in your configuration file.\n   */\n  public setRefreshInterval(refreshInterval: HumanDuration) {\n    this.env.logger.warn(\n      \"The method setRefreshInterval is deprecated. Please define the refresh interval via the config file in 's3.bucketRefreshSchedule' instead\",\n    );\n    this.refreshInterval = refreshInterval;\n    return this;\n  }\n\n  /**\n   * Analyzes the identity of the user that made the request and checks\n   * for permissions to make such request. Throws an error if the request\n   * is not authorized or the user has no permissions.\n   *\n   * @param request - The received request\n   * @param permission - The permission to be checked by the backend\n   * @returns The decision made by the backend\n   */\n  private async evaluateRequest(\n    request: express.Request,\n    permission: QueryPermissionRequest,\n  ): Promise<{\n    decision: PolicyDecision;\n  }> {\n    const credentials = await this.env.httpAuth.credentials(request, {\n      allowLimitedAccess: true,\n    });\n\n    const decision = (\n      await this.env.permissions.authorizeConditional([permission], {\n        credentials,\n      })\n    )[0];\n\n    if (decision.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError('Unauthorized');\n    }\n\n    return { decision };\n  }\n\n  /**\n   * Parses the decision retuned by the permission backend into a bucket filter, which\n   * is used in the bucketsProvider to return only the allowed buckets.\n   *\n   * @param decision - The decision returned by the permission backend\n   * @returns The filter used if the decision is conditional. `undefined` otherwise\n   */\n  protected getBucketFilter(\n    decision: PolicyDecision,\n  ): BucketDetailsFilters | undefined {\n    if (decision.result !== AuthorizeResult.CONDITIONAL) {\n      return undefined;\n    }\n    return transformConditions(decision.conditions);\n  }\n\n  /**\n   * Receives the decision made and checks if the user is allowed to make such request.\n   *\n   * It throws an error if the bucket is not found or if the user is not\n   * authorized to request data for a certain bucket.\n   *\n   * @param endpoint - The endpoint where the bucket is\n   * @param bucket - The bucket name\n   * @param decision - The decision returned by the permission backend\n   */\n  protected requireBucketPermission(\n    endpoint: string,\n    bucket: string,\n    decision: PolicyDecision,\n  ) {\n    const bucketInfo = this.bucketsProvider?.getBucketInfo(endpoint, bucket);\n    if (!bucketInfo) {\n      throw new NotFoundError();\n    }\n\n    const filter = this.getBucketFilter(decision);\n    if (!matches(bucketInfo, filter)) {\n      throw new NotAllowedError();\n    }\n  }\n\n  /**\n   * Builds the backend routes for S3.\n   *\n   * @param client - The S3 client used to list the secrets.\n   * @returns The generated backend router\n   */\n  protected buildRouter(client: S3Api): express.Router {\n    const router = Router();\n    router.use(express.json());\n    router.use(cookieParser());\n\n    router.get('/health', (_, res) => {\n      res.json({ status: 'ok' });\n    });\n\n    router.get('/cookie', async (req, res) => {\n      const credentials = await this.env.httpAuth.credentials(req, {\n        allowLimitedAccess: true,\n        allow: ['user'],\n      });\n\n      const { expiresAt } = await this.env.httpAuth.issueUserCookie(res, {\n        credentials,\n      });\n      res.status(200).json({ expiresAt: expiresAt.toISOString() });\n    });\n\n    router.get('/buckets', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3BucketList,\n      });\n\n      const filter = this.getBucketFilter(decision);\n      const buckets = this.bucketsProvider?.getAllBuckets(filter);\n      if (!buckets) {\n        throw new NotFoundError();\n      }\n      res.json(buckets);\n    });\n\n    router.get('/buckets/by-endpoint', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3BucketList,\n      });\n\n      const filter = this.getBucketFilter(decision);\n      const { endpoint } = req.query;\n      const bucketsByEndpoint = this.bucketsProvider?.getBucketsByEndpoint(\n        endpoint as string,\n        filter,\n      );\n      if (!bucketsByEndpoint) {\n        throw new NotFoundError();\n      }\n      res.json(bucketsByEndpoint);\n    });\n\n    router.get('/buckets/grouped', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3BucketList,\n      });\n\n      const { bucketName } = req.query;\n\n      const permissionFilter = this.getBucketFilter(decision);\n\n      const paramFilters: BucketDetailsFilters[] = [];\n\n      if (bucketName) {\n        paramFilters.push({\n          property: 'bucket',\n          values: [bucketName.toString()],\n        });\n      }\n\n      const finalFilter: BucketDetailsFilters = {\n        allOf: [\n          ...(paramFilters.length ? [{ allOf: paramFilters }] : []),\n          ...(permissionFilter ? [permissionFilter] : []),\n        ],\n      };\n\n      const groupedBuckets =\n        this.bucketsProvider?.getGroupedBuckets(finalFilter);\n      if (!groupedBuckets) {\n        throw new NotFoundError();\n      }\n      res.json(groupedBuckets);\n    });\n\n    router.get('/bucket/:bucket', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3BucketRead,\n      });\n\n      const { bucket } = req.params;\n      const { endpoint } = req.query;\n      const bucketInfo = this.bucketsProvider?.getBucketInfo(\n        endpoint as string,\n        bucket,\n      );\n      if (!bucketInfo) {\n        throw new NotFoundError();\n      }\n\n      const filter = this.getBucketFilter(decision);\n      if (!matches(bucketInfo, filter)) {\n        throw new NotAllowedError();\n      }\n      res.json(bucketInfo);\n    });\n\n    router.get('/bucket/:bucket/keys', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3BucketRead,\n      });\n\n      const { bucket } = req.params;\n      const { continuationToken, pageSize, folder, prefix, endpoint } =\n        req.query;\n\n      this.requireBucketPermission(endpoint as string, bucket, decision);\n\n      const keys = await client.listBucketKeys(\n        endpoint as string,\n        bucket,\n        continuationToken as string,\n        Number(pageSize as string),\n        folder as string,\n        prefix as string,\n      );\n      res.json(keys);\n    });\n\n    router.get('/bucket/:bucket/:key', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3ObjectRead,\n      });\n\n      const { bucket, key } = req.params;\n      const { endpoint } = req.query;\n\n      this.requireBucketPermission(endpoint as string, bucket, decision);\n\n      const object = await client.headObject(endpoint as string, bucket, key);\n      res.json(object);\n    });\n\n    router.get('/stream/:bucket/:key', async (req, res) => {\n      const { decision } = await this.evaluateRequest(req, {\n        permission: permissions.s3ObjectDownload,\n      });\n\n      const { bucket, key } = req.params;\n      const { endpoint } = req.query;\n\n      this.requireBucketPermission(endpoint as string, bucket, decision);\n\n      const object = await client.headObject(endpoint as string, bucket, key);\n      res.setHeader('Access-Control-Expose-Headers', 'Content-Disposition');\n      res.setHeader(\n        'Content-Disposition',\n        `attachment; filename=\"${object.downloadName}\"`,\n      );\n      res.setHeader('Content-Type', object.contentType);\n      if (object.contentLength) {\n        res.setHeader('Content-Length', object.contentLength);\n      }\n\n      const body = await client.streamObject(endpoint as string, bucket, key);\n      body.on('error', err => {\n        assertError(err);\n        this.env.logger.error(err.message);\n        res.status(400).send(err.message);\n      });\n      body.on('data', data => res.write(data));\n      body.on('end', () => res.send());\n    });\n\n    return router;\n  }\n}\n"],"names":["Router","readSchedulerServiceTaskScheduleDefinitionFromConfig","S3BucketsProvider","S3Client","getCombinedCredentialsProvider","AuthorizeResult","NotAllowedError","transformConditions","NotFoundError","matches","express","cookieParser","permissions","assertError"],"mappings":"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"}