{"version":3,"file":"S3BucketsProvider.cjs.js","sources":["../../src/service/S3BucketsProvider.ts"],"sourcesContent":["import {\n  BucketStatsProvider,\n  BucketsProvider,\n  CredentialsProvider,\n} from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport {\n  BucketCredentials,\n  BucketDetails,\n  BucketDetailsFilters,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskScheduleDefinition,\n} from '@backstage/backend-plugin-api';\nimport { S3 } from '@aws-sdk/client-s3';\nimport { matches } from '../permissions';\n\nexport class S3BucketsProvider implements BucketsProvider {\n  private buckets: BucketDetails[];\n  private bucketCreds: BucketCredentials[];\n\n  constructor(\n    readonly logger: LoggerService,\n    readonly scheduler: SchedulerService,\n    readonly credentialsProvider: CredentialsProvider,\n    readonly statsProvider: BucketStatsProvider | undefined,\n    readonly schedule: SchedulerServiceTaskScheduleDefinition | undefined,\n  ) {\n    this.buckets = [];\n    this.bucketCreds = [];\n  }\n\n  static create(\n    logger: LoggerService,\n    scheduler: SchedulerService,\n    credentialsProvider: CredentialsProvider,\n    statsProvider: BucketStatsProvider | undefined,\n    schedule: SchedulerServiceTaskScheduleDefinition | undefined,\n  ): S3BucketsProvider {\n    const bucketsProvider = new S3BucketsProvider(\n      logger,\n      scheduler,\n      credentialsProvider,\n      statsProvider,\n      schedule,\n    );\n    // Don't wait for bucket fetch. This speeds up the backend startup process.\n    bucketsProvider.start();\n\n    return bucketsProvider;\n  }\n\n  async start(): Promise<void> {\n    await this.fetchBuckets();\n    if (this.schedule) {\n      await this.scheduler.scheduleTask({\n        id: 'refresh-s3-buckets',\n        fn: async () => this.fetchBuckets(),\n        frequency: this.schedule.frequency,\n        timeout: this.schedule.timeout,\n        initialDelay: this.schedule.initialDelay,\n        scope: this.schedule.scope,\n      });\n    }\n  }\n\n  async fetchBuckets(): Promise<void> {\n    this.logger.info('Fetching S3 buckets...');\n    const bucketDetails: BucketDetails[] = [];\n    const bucketCredentials =\n      await this.credentialsProvider.getBucketCredentials();\n    await Promise.all(\n      bucketCredentials.map(async creds => {\n        try {\n          const s3Client = new S3({\n            apiVersion: '2006-03-01',\n            credentials: creds.credentials,\n            endpoint: creds.endpoint,\n            region: creds.region,\n            forcePathStyle: true,\n          });\n\n          const owner = await s3Client.getBucketAcl({ Bucket: creds.bucket });\n\n          const details: BucketDetails = {\n            bucket: creds.bucket,\n            owner: owner.Owner?.DisplayName || '',\n            objects: 0,\n            size: 0,\n            endpoint: creds.endpoint,\n            endpointName: creds.endpointName,\n            policy: [],\n          };\n\n          if (this.statsProvider) {\n            try {\n              const stats = await this.statsProvider.getStats(\n                creds.endpoint,\n                creds.bucket,\n              );\n              details.objects = stats.objects;\n              details.size = stats.size;\n            } catch (err) {\n              this.logger.error(\n                `Could not fetch stats for ${creds.bucket} in ${creds.endpoint}: ${err}`,\n              );\n            }\n          }\n\n          await s3Client\n            .getBucketLifecycleConfiguration({\n              Bucket: creds.bucket,\n            })\n            .then(value => (details.policy = value.Rules || []))\n            .catch(\n              // This catches an error if the lifecycle is not defined.\n              // Just skip this error an continue processing\n              _ => {},\n            );\n\n          bucketDetails.push(details);\n        } catch (err) {\n          this.logger.error(\n            `Error fetching data for bucket \"${creds.bucket}\", skipping. ${err}`,\n          );\n        }\n      }),\n    );\n\n    this.buckets = bucketDetails;\n    this.bucketCreds = bucketCredentials;\n    this.logger.info(`Fetched ${this.buckets.length} S3 buckets`);\n  }\n\n  getAllBuckets(filter?: BucketDetailsFilters): string[] {\n    return this.buckets\n      .filter(b => matches(b, filter))\n      .map(b => b.bucket)\n      .sort();\n  }\n\n  getBucketsByEndpoint(\n    endpoint: string,\n    filter?: BucketDetailsFilters,\n  ): string[] {\n    return this.buckets\n      .filter(b => matches(b, filter))\n      .filter(b => b.endpoint === endpoint || b.endpointName === endpoint)\n      .map(b => b.bucket)\n      .sort();\n  }\n\n  getGroupedBuckets(filter?: BucketDetailsFilters): Record<string, string[]> {\n    const bucketsByEndpoint: Record<string, string[]> = {};\n\n    this.buckets\n      .filter(bucket => matches(bucket, filter))\n      .forEach(b => {\n        const endpoint = b.endpointName;\n        if (!bucketsByEndpoint[endpoint]) {\n          bucketsByEndpoint[endpoint] = [];\n        }\n        if (!bucketsByEndpoint[endpoint].includes(b.bucket)) {\n          bucketsByEndpoint[endpoint].push(b.bucket);\n        }\n      });\n\n    Object.keys(bucketsByEndpoint).forEach(key => {\n      bucketsByEndpoint[key] = bucketsByEndpoint[key].sort();\n    });\n\n    return bucketsByEndpoint;\n  }\n\n  getBucketInfo(endpoint: string, bucket: string): BucketDetails | undefined {\n    return this.buckets.find(\n      b =>\n        b.bucket === bucket &&\n        (b.endpoint === endpoint || b.endpointName === endpoint),\n    );\n  }\n\n  getCredentialsForBucket(\n    endpoint: string,\n    bucket: string,\n  ): BucketCredentials | undefined {\n    return this.bucketCreds.find(\n      b =>\n        b.bucket === bucket &&\n        (b.endpoint === endpoint || b.endpointName === endpoint),\n    );\n  }\n}\n"],"names":["S3","matches"],"mappings":"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"}