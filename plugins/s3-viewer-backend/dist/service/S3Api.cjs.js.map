{"version":3,"file":"S3Api.cjs.js","sources":["../../src/service/S3Api.ts"],"sourcesContent":["import {\n  FetchObjectResult,\n  KeyData,\n  ListBucketKeysResult,\n} from '@spreadshirt/backstage-plugin-s3-viewer-common';\nimport { GetObjectCommand, S3 } from '@aws-sdk/client-s3';\nimport moment from 'moment';\nimport { Readable } from 'stream';\nimport {\n  BucketsProvider,\n  S3Api,\n} from '@spreadshirt/backstage-plugin-s3-viewer-node';\nimport { DiscoveryService } from '@backstage/backend-plugin-api';\nimport { NotFoundError } from '@backstage/errors';\n\nexport interface S3ClientEnvironment {\n  discoveryApi: DiscoveryService;\n  bucketsProvider: BucketsProvider;\n}\n\nexport class S3Client implements S3Api {\n  private discoveryApi: DiscoveryService;\n  private bucketsProvider: BucketsProvider;\n\n  constructor({ bucketsProvider, discoveryApi }: S3ClientEnvironment) {\n    this.bucketsProvider = bucketsProvider;\n    this.discoveryApi = discoveryApi;\n  }\n\n  private getS3Client(endpoint: string, bucket: string): S3 {\n    const data = this.bucketsProvider.getCredentialsForBucket(endpoint, bucket);\n    if (!data) {\n      throw new Error(`No credentials stored for ${endpoint}/${bucket}`);\n    }\n\n    const s3Client = new S3({\n      apiVersion: '2006-03-01',\n      credentials: data.credentials,\n      endpoint: data.endpoint,\n      region: data.region,\n      forcePathStyle: true,\n    });\n\n    return s3Client;\n  }\n\n  async listBucketKeys(\n    endpoint: string,\n    bucket: string,\n    continuationToken: string,\n    pageSize: number,\n    folder: string,\n    prefix: string,\n  ): Promise<ListBucketKeysResult> {\n    const s3Client = this.getS3Client(endpoint, bucket);\n    const bucketInfo = this.bucketsProvider.getBucketInfo(endpoint, bucket);\n    const output = await s3Client\n      .listObjects({\n        Bucket: bucket,\n        MaxKeys: pageSize,\n        Marker: continuationToken,\n        Prefix: folder + prefix,\n        Delimiter: '/',\n      })\n      .catch(e => {\n        throw new Error(`Error listing keys: ${e.statusCode} ${e.code}`);\n      });\n\n    const keys: KeyData[] =\n      output.CommonPrefixes?.map(p => ({\n        name: p.Prefix?.substring(folder.length) || '',\n        isFolder: true,\n      })).filter(k => k.name !== '') || [];\n\n    output.Contents?.forEach(c => {\n      if (c.Key) {\n        keys.push({\n          name: c.Key.substring(folder.length),\n          isFolder: false,\n        });\n      }\n    });\n\n    let totalObjects = bucketInfo?.objects ?? NaN;\n    if (totalObjects === 0) {\n      totalObjects = keys.length;\n    }\n\n    return {\n      totalBucketObjects: output.IsTruncated ? totalObjects + 1 : totalObjects,\n      keys: keys,\n      next: output.NextMarker,\n    };\n  }\n\n  async headObject(\n    endpoint: string,\n    bucket: string,\n    key: string,\n  ): Promise<FetchObjectResult> {\n    const s3Client = this.getS3Client(endpoint, bucket);\n    const output = await s3Client\n      .headObject({\n        Bucket: bucket,\n        Key: key,\n      })\n      .catch(e => {\n        throw new Error(`Error fetching object: ${e.statusCode} ${e.code}`);\n      });\n\n    return {\n      name: key,\n      bucket: bucket,\n      etag: output.ETag?.replace(/\"+/g, '') || '',\n      lastModified:\n        moment(output.LastModified).utc().format('YYYY-MM-DD HH:mm:ss') ||\n        'unknown',\n      contentLength: output.ContentLength,\n      contentType: output.ContentType || '',\n      downloadName: key.split('/').pop() || key,\n      downloadUrl: await this.getDownloadUrl(endpoint, bucket, key),\n    };\n  }\n\n  async streamObject(\n    endpoint: string,\n    bucket: string,\n    key: string,\n  ): Promise<Readable> {\n    const s3Client = this.getS3Client(endpoint, bucket);\n    const { Body: body } = await s3Client.send(\n      new GetObjectCommand({\n        Bucket: bucket,\n        Key: key,\n      }),\n    );\n\n    if (!body) {\n      throw new NotFoundError(`Key \"${key}\" not found in bucket \"${bucket}\"`);\n    }\n    if (body instanceof Readable) {\n      return body;\n    }\n    throw new Error('Unexpected stream received');\n  }\n\n  /**\n   * Generates a URL to download a file from a bucket. It has an\n   * expiration of 60 seconds for security reasons.\n   *\n   * @param endpoint Endpoint where the bucket is located\n   * @param bucket The bucket name\n   * @param key The key location, including it's full path\n   * @returns The signed URL to download the file. Valid for 60 seconds\n   */\n  private async getDownloadUrl(\n    endpoint: string,\n    bucket: string,\n    key: string,\n  ): Promise<string> {\n    const s3Url = await this.discoveryApi.getExternalBaseUrl('s3-viewer');\n    const url = new URL(\n      `${s3Url}/stream/${encodeURIComponent(bucket)}/${encodeURIComponent(\n        key,\n      )}?${new URLSearchParams({ endpoint })}`,\n    );\n    return url.toString();\n  }\n}\n"],"names":["S3","moment","GetObjectCommand","NotFoundError","Readable"],"mappings":"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"}